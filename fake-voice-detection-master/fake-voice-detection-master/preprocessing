
import argparse
import os
import numpy as np
import pandas as pd
import librosa
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

# Function to extract audio features
def extract_features(file_path):
    try:
        y, sr = librosa.load(file_path, sr=None)
        features = {
            'mfcc': np.mean(librosa.feature.mfcc(y=y, sr=sr), axis=1),
            'spectrogram': np.mean(librosa.feature.melspectrogram(y=y, sr=sr), axis=1),
            'chroma': np.mean(librosa.feature.chroma_stft(y=y, sr=sr), axis=1),
            'spectral_centroid': np.mean(librosa.feature.spectral_centroid(y=y, sr=sr)),
            'spectral_bandwidth': np.mean(librosa.feature.spectral_bandwidth(y=y, sr=sr)),
            'spectral_rolloff': np.mean(librosa.feature.spectral_rolloff(y=y, sr=sr)),
            'zero_crossing_rate': np.mean(librosa.feature.zero_crossing_rate(y)),
            'rms': np.mean(librosa.feature.rms(y=y))
        }
        return np.hstack(list(features.values()))
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return None

# Function to process directories and save dataset
def preprocess_data(real_dir, fake_dir, output_csv='dataset.csv'):
    data = []
    for label, directory in enumerate([real_dir, fake_dir]):
        for filename in os.listdir(directory):
            if filename.endswith('.wav'):
                file_path = os.path.join(directory, filename)
                features = extract_features(file_path)
                if features is not None:
                    data.append(np.hstack((features, label)))  # Add label (0=real, 1=fake)

    # Create DataFrame and normalize features
    df = pd.DataFrame(data)
    feature_columns = df.columns[:-1]
    scaler = StandardScaler()
    df[feature_columns] = scaler.fit_transform(df[feature_columns])

    # Save processed dataset to CSV
    df.to_csv(output_csv, index=False, header=False)
    print(f"Dataset saved to {output_csv}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Preprocess audio dataset for deepfake detection")
    parser.add_argument("--real_dir", type=str, required=True, help="Directory containing real audio files")
    parser.add_argument("--fake_dir", type=str, required=True, help="Directory containing fake audio files")
    parser.add_argument("--output_csv", type=str, default="dataset.csv", help="Output CSV file path")
    args = parser.parse_args()
    preprocess_data(args.real_dir, args.fake_dir, args.output_csv)
